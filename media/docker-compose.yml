services:
  #-------------- [VPN tunnel] -------------#
  vpn:
    image: qmcgaw/gluetun:v3
    container_name: vpn
    hostname: vpn
    restart: unless-stopped
    cap_add: [NET_ADMIN]
    ports:
      - ${QBITTORRENT_UI_PORT}:${QBITTORRENT_UI_PORT}
    environment:
      - VPN_TYPE=wireguard
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER}
      - FIREWALL_VPN_INPUT_PORTS=${FIREWALL_VPN_INPUT_PORT}
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
      - WIREGUARD_PRESHARED_KEY=${WIREGUARD_PRESHARED_KEY}
      - WIREGUARD_ADDRESSES=${WIREGUARD_ADDRESSES}
      ######### for service provider 'custom' ##########
      - WIREGUARD_PUBLIC_KEY=${WIREGUARD_PUBLIC_KEY}
      - WIREGUARD_ENDPOINT_IP=${WIREGUARD_ENDPOINT_IP}
      - WIREGUARD_ENDPOINT_PORT=${WIREGUARD_ENDPOINT_PORT}
      ######### for specific service provider ##########
      # - SERVER_COUNTRIES=${VPN_SERVER_COUNTRIES}
    volumes:
      - ${CONFIGS_DIR}/gluetun:/gluetun
    devices:
      - /dev/net/tun:/dev/net/tun

  #-------------- [qbittorrent] ---------------#
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:vpn"
    environment: &envz
      TZ: &TZ TZ=Europe/Riga
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      WEBUI_PORT: ${QBITTORRENT_UI_PORT}
      TORRENTING_PORT: ${FIREWALL_VPN_INPUT_PORT}
    volumes:
      - ${CONFIGS_DIR}/qbittorrent:/config
      - type: volume
        source: media_data
        target: /mount/downloads
        volume:
          subpath: downloads
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 5G
        reservations:
          memory: 1G
    depends_on:
      vpn: &healthy
        condition: service_healthy
    healthcheck: &http_healthcheck
      test: curl -f -s -o /dev/null http://localhost:${QBITTORRENT_UI_PORT}
      start_period: 3s
      interval: 10s
      timeout: 5s
      retries: 5

  #------------- [flaresolverr] ------------#
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - *TZ
    restart: unless-stopped

  #--------------- [prowlarr] ----------------#
  prowlarr:
    image: linuxserver/prowlarr:latest
    container_name: prowlarr
    environment: *envz
    volumes:
      - ${CONFIGS_DIR}/servarr/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped
    depends_on:
      qbittorrent: *healthy
    healthcheck:
      <<: *http_healthcheck
      test: curl -f http://localhost:9696/ping

  #--------------- [radarr] -----------------#
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment: *envz
    volumes:
      - ${CONFIGS_DIR}/servarr/radarr:/config
      - media_data:/mount
    ports:
      - 7878:7878
    restart: unless-stopped
    healthcheck:
      <<: *http_healthcheck
      test: curl -f http://localhost:7878/ping
    depends_on:
      prowlarr: *healthy
      qbittorrent: *healthy

  #--------------- [sonarr] ----------------#
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment: *envz
    volumes:
      - ${CONFIGS_DIR}/servarr/sonarr:/config
      - media_data:/mount
    ports:
      - 8989:8989
    restart: unless-stopped
    healthcheck:
      <<: *http_healthcheck
      test: curl -f http://localhost:8989/ping
    depends_on:
      prowlarr: *healthy
      qbittorrent: *healthy

  #------------- [jellyfin] -------------#
  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    user: ${PUID:-1000}:${PGID:-1000}
    group_add: ["985"]
    network_mode: "host"
    environment:
      TZ: *TZ
    volumes:
      - ${CONFIGS_DIR}/jellyfin/config:/config
      - ${CONFIGS_DIR}/jellyfin/cache:/cache
      - type: volume
        source: media_data
        target: /media
        volume:
          subpath: media
    devices:
      - /dev/dri:/dev/dri
    restart: unless-stopped
    healthcheck:
      <<: *http_healthcheck
      test: curl -X POST -f http://localhost:8096/System/Ping && sleep 2

  #------------- [jellyseerr] -------------#
  jellyseerr:
    image: fallenbagel/jellyseerr:develop
    container_name: jellyseerr
    network_mode: "host"
    ports:
      - 5055:5055
    environment:
      LOG_LEVEL: debug
      TZ: *TZ
    volumes:
      - ${CONFIGS_DIR}/jellyseerr:/app/config
    devices:
      - /dev/dri:/dev/dri
    restart: unless-stopped
    depends_on:
      jellyfin: *healthy
      sonarr: *healthy
      radarr: *healthy

  #------------- [sanitarr] -------------#
  # https://github.com/serzhshakur/sanitarr
  sanitarr:
    image: sanitarr:local
    container_name: sanitarr
    network_mode: "host"
    pull_policy: never
    environment:
      LOG_LEVEL: debug
      INTERVAL: 45m
    volumes:
      - ${CONFIGS_DIR}/sanitarr-config.toml:/app/config.toml
    command: ["--config", "/app/config.toml", "--force-delete"]
    depends_on:
      jellyfin: *healthy
      sonarr: *healthy
      radarr: *healthy

#-----------------------------------------#
volumes:
  media_data:
    name: media_data
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${SERVARR_VOLUME_DIR}
# networks:
#   servarr:
#     driver: bridge
